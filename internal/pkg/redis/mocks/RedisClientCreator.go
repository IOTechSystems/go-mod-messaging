// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	tls "crypto/tls"

	redis "github.com/edgexfoundry/go-mod-messaging/v3/internal/pkg/redis"
	mock "github.com/stretchr/testify/mock"
)

// RedisClientCreator is an autogenerated mock type for the RedisClientCreator type
type RedisClientCreator struct {
	mock.Mock
}

// Execute provides a mock function with given fields: redisServerURL, password, tlsConfig
func (_m *RedisClientCreator) Execute(redisServerURL string, password string, tlsConfig *tls.Config) (redis.RedisClient, error) {
	ret := _m.Called(redisServerURL, password, tlsConfig)

	var r0 redis.RedisClient
	if rf, ok := ret.Get(0).(func(string, string, *tls.Config) redis.RedisClient); ok {
		r0 = rf(redisServerURL, password, tlsConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(redis.RedisClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *tls.Config) error); ok {
		r1 = rf(redisServerURL, password, tlsConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRedisClientCreator interface {
	mock.TestingT
	Cleanup(func())
}

// NewRedisClientCreator creates a new instance of RedisClientCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRedisClientCreator(t mockConstructorTestingTNewRedisClientCreator) *RedisClientCreator {
	mock := &RedisClientCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
