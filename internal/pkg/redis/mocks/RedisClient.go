// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "github.com/edgexfoundry/go-mod-messaging/v2/pkg/types"
)

// RedisClient is an autogenerated mock type for the RedisClient type
type RedisClient struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *RedisClient) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Receive provides a mock function with given fields: topic
func (_m *RedisClient) Receive(topic string) (*types.MessageEnvelope, error) {
	ret := _m.Called(topic)

	var r0 *types.MessageEnvelope
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.MessageEnvelope, error)); ok {
		return rf(topic)
	}
	if rf, ok := ret.Get(0).(func(string) *types.MessageEnvelope); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MessageEnvelope)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceiveBinaryData provides a mock function with given fields: topic
func (_m *RedisClient) ReceiveBinaryData(topic string) (*types.MessageEnvelope, error) {
	ret := _m.Called(topic)

	var r0 *types.MessageEnvelope
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.MessageEnvelope, error)); ok {
		return rf(topic)
	}
	if rf, ok := ret.Get(0).(func(string) *types.MessageEnvelope); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MessageEnvelope)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Send provides a mock function with given fields: topic, message
func (_m *RedisClient) Send(topic string, message types.MessageEnvelope) error {
	ret := _m.Called(topic, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, types.MessageEnvelope) error); ok {
		r0 = rf(topic, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendBinaryData provides a mock function with given fields: topic, data
func (_m *RedisClient) SendBinaryData(topic string, data []byte) error {
	ret := _m.Called(topic, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(topic, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRedisClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewRedisClient creates a new instance of RedisClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRedisClient(t mockConstructorTestingTNewRedisClient) *RedisClient {
	mock := &RedisClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
